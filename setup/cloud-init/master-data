#cloud-config

coreos:
  etcd2:
    # multi-region and multi-cloud deployments need to use $public_ipv4
    advertise-client-urls: http://$public_ipv4:2379
    initial-advertise-peer-urls: http://$private_ipv4:2380
    # listen on both the official ports and the legacy ports
    # legacy ports can be omitted if your application doesn't depend on them
    listen-client-urls: http://0.0.0.0:2379,http://0.0.0.0:4001
    listen-peer-urls: http://$private_ipv4:2380,http://$private_ipv4:7001
    initial-cluster-state: new

  fleet:
    public-ip: $public_ipv4
    metadata: "role=master"

  flannel:
    interface: $public_ipv4

  units:
    - name: fleet.service
      command: start

    - name: rpcbind.service
      enable: true
      command: start

    - name: rpc-statd.service
      enable: true
      command: start

    - name: setup-network-environment.service
      command: start
      content: |
        [Unit]
        Description=Setup Network Environment
        Documentation=https://github.com/kelseyhightower/setup-network-environment
        Requires=network-online.target
        After=network-online.target
        [Service]
        ExecStartPre=-/usr/bin/mkdir -p /opt/bin
        ExecStartPre=/usr/bin/wget -P /opt/bin https://github.com/kelseyhightower/setup-network-environment/releases/download/v1.0.0/setup-network-environment
        ExecStartPre=/usr/bin/chmod +x /opt/bin/setup-network-environment
        ExecStart=/opt/bin/setup-network-environment
        RemainAfterExit=yes
        Type=oneshot

    - name: docker-tcp.socket
      command: start
      enable: true
      content: |
        [Unit]
        Description=Docker Socket for the API

        [Socket]
        ListenStream=2375
        Service=docker.service
        BindIPv6Only=both

        [Install]
        WantedBy=sockets.target

  update:
    group: alpha
    reboot-strategy: off

write_files:
  - path: /etc/systemd/system/etcd2.service
    permissions: 0644
    owner: root
    content: |
      [Install]
      WantedBy=default.target

      [Unit]
      Description=etcd2
      Conflicts=etcd.service

      [Service]
      User=etcd
      Environment=ETCD_DATA_DIR=/var/lib/etcd2
      Environment=ETCD_NAME=%m
      ExecStart=/usr/bin/etcd2
      Restart=always
      RestartSec=10s
      LimitNOFILE=40000

  - path: /etc/sysconfig/kubernetes-config
    permissions: 0644
    owner: root
    content: |
      KUBERNETES_VERSION=1.0.6
      SECURE_BIND_ADDRESS=0.0.0.0
      SECURE_PORT=6443
      SERVICE_CLUSTER_IP_RANGE=10.100.0.0/16
      SERVICE_NODE_PORT_RANGE=9000-12767
      ETCD_SERVER_PORT_1=2379
      ETCD_SERVER_PORT_2=4001
      CORS_ALLOWED_ORIGINS=.*
      ADMISSION_CONTROL=NamespaceLifecycle,NamespaceExists,LimitRanger,SecurityContextDeny,ServiceAccount,ResourceQuota
      CLUSTER_NAME=kube-rocks
      CLUSTER_CA_FILE_PATH=/srv/kubernetes/ca.crt
      SERVER_CERT_PATH=/srv/kubernetes/server.cert
      SERVER_PRIVATE_KEY_PATH=/srv/kubernetes/server.key
      KUBELET_CERT_PATH=/srv/kubernetes/kubelet.cert
      KUBELET_PRIVATE_KEY_PATH=/srv/kubernetes/kubelet.key
      RUNTIME_CONFIG=api/v1
      POD_EVICTION_TIMEOUT=30s
      CLOUD_PROVIDER=

  - path: /srv/kubernetes/ca.crt
    permissions: 0660
    owner: root
    content: |
      -----BEGIN CERTIFICATE-----
      ### CERT GOES HERE
      -----END CERTIFICATE-----

  - path: /srv/kubernetes/server.cert
    permissions: 0660
    owner: root
    content: |
      ### CERT GOES HERE

  - path: /srv/kubernetes/server.key
    permissions: 0660
    owner: root
    content: |
      -----BEGIN RSA PRIVATE KEY-----
      ### KEY GOES HERE
      -----END RSA PRIVATE KEY-----

  - path: /srv/kubernetes/kubelet.cert
    permissions: 0660
    owner: root
    content: |
      ### CERT GOES HERE

  - path: /srv/kubernetes/kubelet.key
    permissions: 0660
    owner: root
    content: |
      -----BEGIN RSA PRIVATE KEY-----
      ### KEY GOES HERE
      -----END RSA PRIVATE KEY-----

  - path: /srv/kubernetes/policy.jsonl
    permissions: 0644
    owner: root
    content: |
      {"user":"admin"}
      {"user":"scheduler", "readonly": true, "resource": "pods"}
      {"user":"scheduler", "resource": "bindings"}
      {"user":"kubelet",  "readonly": true, "resource": "pods"}
      {"user":"kubelet",  "readonly": true, "resource": "services"}
      {"user":"kubelet",  "readonly": true, "resource": "endpoints"}
      {"user":"kubelet", "resource": "events"}
